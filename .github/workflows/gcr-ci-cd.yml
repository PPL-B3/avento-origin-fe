name: Cloud Run CI/CD

on:
  push:
    branches:
      - dev
      - staging
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.4

      - name: Install dependencies
        run: pnpm install --ignore-scripts

      - name: Build
        run: pnpm build
        env:
          NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          LOGROCKET_ID: ${{ secrets.LOGROCKET_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/avento-origin-fe
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          flavor: |
            latest=false
            prefix=${{ steps.extract_branch.outputs.BRANCH_NAME }}-
            enable=${{ github.ref != 'refs/heads/main' }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            LOGROCKET_ID=${{ secrets.LOGROCKET_ID }}

      - id: 'auth'
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          environment="${GITHUB_REF#refs/heads/}"
          service_name="avento-origin-fe"

          if [ "$environment" == "dev" ]; then
            service_name="avento-origin-fe-dev"
          elif [ "$environment" == "staging" ]; then
            service_name="avento-origin-fe-staging"
          fi

          # Use SHA tag for deployment to ensure unique version
          SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep -o "${{ secrets.DOCKER_USERNAME }}/avento-origin-fe:sha-[a-f0-9]*" | head -1)

          if [ -z "$SHA_TAG" ]; then
            # Fallback to any available tag
            IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
          else
            IMAGE_TAG=$SHA_TAG
          fi

          gcloud run deploy $service_name \
            --image $IMAGE_TAG \
            --platform managed \
            --region asia-southeast2 \
            --max-instances 5 \
            --memory 512Mi \
            --cpu 1 \
            --allow-unauthenticated \
            --set-env-vars=NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }},NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }},LOGROCKET_ID=${{ secrets.LOGROCKET_ID }} \
            --project ${{ secrets.GCP_PROJECT_ID }}
