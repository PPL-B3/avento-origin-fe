name: Cloud Run CI/CD

on:
  push:
    branches:
      - dev
      - staging
      - main
  workflow_dispatch:

jobs:
  versioning-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.4

      - name: Install dependencies
        run: pnpm install --ignore-scripts

      - name: Semantic Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/exec
          BRANCH="${GITHUB_REF#refs/heads/}"

          # Configure semantic-release based on branch
          if [ "$BRANCH" = "main" ]; then
            RELEASE_BRANCH="main"
            PRE_RELEASE=false
          elif [ "$BRANCH" = "staging" ]; then
            RELEASE_BRANCH="staging"
            PRE_RELEASE=true
          else
            RELEASE_BRANCH="dev"
            PRE_RELEASE=true
          fi

          # Run semantic-release
          VERSION=$(semantic-release --branches $RELEASE_BRANCH --no-ci --dry-run | grep -oP 'Published release \K[0-9]+\.[0-9]+\.[0-9]+' || echo "0.0.0")

          if [ "$PRE_RELEASE" = true ]; then
            # Add branch-specific prerelease identifier
            VERSION="${VERSION}-${BRANCH}.$(date +%s)"
          fi

          echo "New version: v${VERSION}"
          echo "VERSION=v${VERSION}" >> $GITHUB_ENV

          # Actually run semantic-release (not dry run)
          semantic-release --branches $RELEASE_BRANCH --no-ci

      - name: Build
        run: pnpm build
        env:
          NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          LOGROCKET_ID: ${{ secrets.LOGROCKET_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/avento-origin-fe
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            LOGROCKET_ID=${{ secrets.LOGROCKET_ID }}

      - id: 'auth'
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          environment="${GITHUB_REF#refs/heads/}"
          service_name="avento-origin-fe"

          if [ "$environment" == "dev" ]; then
            service_name="avento-origin-fe-dev"
          elif [ "$environment" == "staging" ]; then
            service_name="avento-origin-fe-staging"
          fi

          gcloud run deploy $service_name \
            --image ${{ secrets.DOCKER_USERNAME }}/avento-origin-fe:${{ env.VERSION }} \
            --platform managed \
            --region asia-southeast2 \
            --max-instances 5 \
            --memory 512Mi \
            --cpu 1 \
            --allow-unauthenticated \
            --set-env-vars=NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }},NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }},LOGROCKET_ID=${{ secrets.LOGROCKET_ID }} \
            --project ${{ secrets.GCP_PROJECT_ID }}
